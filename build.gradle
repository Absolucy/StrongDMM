plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jmailen.kotlinter' version '1.26.0'
}

application {
    group 'io.github.spair'
    version '1.8.0'
    mainClassName = 'strongdmm.StrongDMM'
}

repositories {
    jcenter()
    mavenCentral()
}

ext {
    lwjglVersion = '3.2.3'
    trove4jVersion = '3.0.3'
    pngjVersion = '2.1.0'
    imguiVersion = '1.78-1.3.0'
    logabackVersion = '1.2.3'
    slf4jVersion = '1.7.30'
    jacksonVersion = '2.11.0'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation "net.sf.trove4j:trove4j:$trove4jVersion"
    implementation "ar.com.hjg:pngj:$pngjVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    implementation "ch.qos.logback:logback-core:$logabackVersion"
    implementation "ch.qos.logback:logback-classic:$logabackVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    implementation "io.imgui.java:imgui-java-binding:$imguiVersion"
    implementation "io.imgui.java:imgui-java-lwjgl3:$imguiVersion"
    runtimeOnly "io.imgui.java:imgui-java-natives-windows:$imguiVersion"
    runtimeOnly "io.imgui.java:imgui-java-natives-linux:$imguiVersion"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    ['', '-opengl', '-glfw', '-stb', '-nfd'].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        runtimeOnly "org.lwjgl:lwjgl$it::natives-windows"
        runtimeOnly "org.lwjgl:lwjgl$it::natives-linux"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

shadowJar {
    archiveName = 'strongdmm.jar'
}

runShadow {
    jvmArgs(['-Dsdmmparser.path=./libs', '-Xmx500m'])
}

processResources {
    from "CHANGELOG.md"

    filesMatching('about.txt') {
        def gitCommitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()
        filter { line -> line.replace('$revision', gitCommitHash) }
        filter { line -> line.replace('$version', version) }
    }
}

task buildEditorZip(type: BuildEditorZip, dependsOn: [clean, build]) {
    build.mustRunAfter(clean)
}

task packageWindowsEditorZip(type: Zip) {
    from("$buildDir/tmp/runtime/win-run") {
        archiveFileName = 'strongdmm-windows.zip'
        destinationDirectory = file("$buildDir/package/windows")
    }
}

task packageLinuxEditorZip(type: Zip) {
    from("$buildDir/tmp/runtime/linux-run") {
        archiveFileName = 'strongdmm-linux.zip'
        destinationDirectory = file("$buildDir/package/linux")
    }
}

task packageEditorZip(dependsOn: [buildEditorZip, packageLinuxEditorZip, packageWindowsEditorZip])
